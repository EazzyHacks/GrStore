const axios = require('axios');
const fetch = require('node-fetch');

const contextInfo = {
  externalAdReply: {
    title: 'üé¨ Facebook Ritual',
    body: 'Videos que cruzan el umbral del √©ter‚Ä¶',
    mediaType: 1,
    previewType: 0,
    mediaUrl: null,
    sourceUrl: 'https://facebook.com',
    thumbnailUrl: 'https://qu.ax/MvYPM.jpg' // miniatura por defecto
  }
};

async function handler(conn, { message, args }) {
  const jid    = message.key.remoteJid;
  const quoted = message;
  const url    = args[0];

  // 1. Validaci√≥n del enlace
  if (!url || !url.includes('facebook.com')) {
    return conn.sendMessage(jid, {
      text: '*üé• Invocaci√≥n fallida*\n\n> Proporciona un enlace v√°lido de Facebook para descargar el video.',
      contextInfo
    }, { quoted });
  }

  // 2. Mensaje ritual de inicio
  await conn.sendMessage(jid, {
    text: '‚åõ *Abriendo el portal de Facebook...*',
    contextInfo
  }, { quoted });

  try {
    // 3. Llamada a la API v3/fb2
    const apiUrl = `https://api.dorratz.com/v3/fb2?url=${encodeURIComponent(url)}`;
    const { data } = await axios.get(apiUrl);

    // 4. Selecci√≥n de calidad preferente
    const videoUrl     = data.hd || data.sd;
    const resolution   = data.hd ? 'HD' : 'SD';
    const thumbUrl     = data.thumbnail;
    const title        = data.title || 'Facebook Video';
    const durationSec  = Math.floor((data.duration_ms || 0) / 1000);
    const minutes      = String(Math.floor(durationSec / 60)).padStart(2, '0');
    const seconds      = String(durationSec % 60).padStart(2, '0');

    // 5. Descarga de miniatura
    const thumbBuffer = await fetch(thumbUrl).then(res => res.buffer());

    // 6. Pie de caja ritual
    const caption = `
‚ï≠‚îÄ„Äå üé¨ ùôÅùòºùòæùôÄùòΩùôäùôäùôÜ - ùôçùôÑùôèùôêùòºùôá „Äç‚îÄ‚ïÆ
‚îÇ üîó Enlace: ${url}
‚îÇ üè∑Ô∏è T√≠tulo: ${title}
‚îÇ üì∫ Calidad: ${resolution}
‚îÇ ‚è±Ô∏è Duraci√≥n: ${minutes}:${seconds}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
*‚ú® Portal abierto con √©xito‚Ä¶*
`.trim();

    // 7. Env√≠o del video como reply, con miniatura
    await conn.sendMessage(jid, {
      video:         { url: videoUrl },
      caption,
      jpegThumbnail: thumbBuffer,
      contextInfo
    }, { quoted });

    // 8. Confirmaci√≥n final
    await conn.sendMessage(jid, {
      text: '‚úÖ *Video invocado.* ¬øDeseas descargar otra joya de Facebook?',
      contextInfo
    }, { quoted });

  } catch (err) {
    console.error('[fb] Error:', err.message);
    await conn.sendMessage(jid, {
      text: 'üö´ *Algo sali√≥ mal al invocar el video de Facebook.*\n\n> Verifica el enlace o intenta m√°s tarde.',
      contextInfo
    }, { quoted });
  }
}

module.exports = {
  command: 'fb',
  handler
};