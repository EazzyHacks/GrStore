const axios = require('axios');
const fetch = require('node-fetch');

const contextInfo = {
  externalAdReply: {
    title: 'üé¨ Facebook Ritual',
    body: 'Videos que cruzan el umbral del √©ter‚Ä¶',
    mediaType: 1,
    previewType: 0,
    mediaUrl: null,
    sourceUrl: 'https://facebook.com',
    thumbnailUrl: 'https://qu.ax/MvYPM.jpg' // miniatura evocadora por defecto
  }
};

async function handler(conn, { message, args }) {
  const jid = message.key.remoteJid;
  const quoted = message;
  const url = args[0];

  // Validaci√≥n del enlace
  if (!url || !url.includes('facebook.com')) {
    return conn.sendMessage(
      jid,
      {
        text: '*üé• ¬øD√≥nde est√° el portal de Facebook?*\n\n> Proporciona un enlace v√°lido de Facebook para invocar el video.',
        contextInfo
      },
      { quoted }
    );
  }

  // Mensaje ritual de invocaci√≥n
  await conn.sendMessage(
    jid,
    {
      text: '‚åõ *Invocando el ritual desde Facebook...*',
      contextInfo
    },
    { quoted }
  );

  try {
    // Llamada a la API
    const apiUrl = `https://api.dorratz.com/fbvideo?url=${encodeURIComponent(url)}`;
    const res = await axios.get(apiUrl);
    const videos = Array.isArray(res.data) ? res.data : [];

    if (!videos.length) {
      throw new Error('Respuesta vac√≠a de la API');
    }

    // Elegir resoluci√≥n para renderizar (shouldRender=true) o la primera
    const choice = videos.find(v => v.shouldRender) || videos[0];
    const videoUrl = choice.url;
    const thumbUrl = choice.thumbnail;

    // Descargar buffer de la miniatura
    const thumbBuffer = await fetch(thumbUrl).then(r => r.buffer());

    // Pie de caja ritual
    const caption = `
‚ï≠‚îÄ„Äå üé¨ ùôÅùòºùòæùôÄùòΩùôäùôäùôÜ - ùôçùôÑùôèùôêùòºùôá „Äç‚îÄ‚ïÆ
‚îÇ üîó Enlace: ${url}
‚îÇ üì∫ Resoluci√≥n: ${choice.resolution}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
*‚ú® Video invocado con √©xito...*
`.trim();

    // Env√≠o del video con miniatura y reply
    await conn.sendMessage(
      jid,
      {
        video: { url: videoUrl },
        caption,
        jpegThumbnail: thumbBuffer,
        contextInfo
      },
      { quoted }
    );

    // Confirmaci√≥n final
    await conn.sendMessage(
      jid,
      {
        text: '‚úÖ *Video enviado.* ¬øDeseas invocar otro o explorar m√°s portales?',
        contextInfo
      },
      { quoted }
    );

  } catch (err) {
    console.error('[fbvideo] Error:', err.message);
    await conn.sendMessage(
      jid,
      {
        text: 'üö´ *Ups... algo fall√≥ al invocar el video de Facebook.*\n\n> Intenta m√°s tarde o verifica el enlace.',
        contextInfo
      },
      { quoted }
    );
  }
}

module.exports = {
  command: 'fb',
  handler
};